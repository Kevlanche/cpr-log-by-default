// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

@SuppressWarnings("unchecked")
public class WorkerTaskDone implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    normal,
    unexpectedError,
  }

  public final Type type;
  public final Object value;
  private WorkerTaskDone(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public static WorkerTaskDone fromNormal(org.json.JSONObject val) { return new WorkerTaskDone(Type.normal, val); }
  public static WorkerTaskDone fromUnexpectedError(java.util.List<String> val) { return new WorkerTaskDone(Type.unexpectedError, val); }

  public boolean isNormal() { return type == Type.normal; }
  public org.json.JSONObject asNormal() { if (type != Type.normal) { throw new IllegalStateException("This WorkerTaskDone is not of type normal, it is '" + type + "'"); } return (org.json.JSONObject)value; }
  public boolean isUnexpectedError() { return type == Type.unexpectedError; }
  public java.util.List<String> asUnexpectedError() { if (type != Type.unexpectedError) { throw new IllegalStateException("This WorkerTaskDone is not of type unexpectedError, it is '" + type + "'"); } return (java.util.List<String>)value; }

  public static WorkerTaskDone fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case normal:
      try {
        final org.json.JSONObject val = obj.getJSONObject("value");
        return fromNormal(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid WorkerTaskDone", e);
      }
    case unexpectedError:
    default:
      try {
        final java.util.List<String> val = codeprober.util.JsonUtil.<String>mapArr(obj.getJSONArray("value"), (arr, idx) -> arr.getString(idx));
        return fromUnexpectedError(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid WorkerTaskDone", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case normal:
      ret.put("value", ((org.json.JSONObject)value));
      break;
    case unexpectedError:
    default:
      ret.put("value", new org.json.JSONArray(((java.util.List<String>)value)));
      break;
    }
    return ret;
  }
}
